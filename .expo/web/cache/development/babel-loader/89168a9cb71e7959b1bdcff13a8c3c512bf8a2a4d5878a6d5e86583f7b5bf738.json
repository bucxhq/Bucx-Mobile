{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { useState, useEffect, useCallback } from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport DEFAULT_CONFIGURATION from \"./internal/defaultConfiguration\";\nimport NativeInterface from \"./internal/nativeInterface\";\nimport State from \"./internal/state\";\nimport * as Types from \"./internal/types\";\nvar _configuration = DEFAULT_CONFIGURATION;\nvar _state = null;\nvar createState = function createState() {\n  return new State(_configuration);\n};\nexport function configure(configuration) {\n  _configuration = _objectSpread(_objectSpread({}, DEFAULT_CONFIGURATION), configuration);\n  if (_state) {\n    _state.tearDown();\n    _state = createState();\n  }\n  if (Platform.OS === 'ios') {\n    NativeInterface.configure(configuration);\n  }\n}\nexport function fetch(requestedInterface) {\n  if (!_state) {\n    _state = createState();\n  }\n  return _state.latest(requestedInterface);\n}\nexport function refresh() {\n  if (!_state) {\n    _state = createState();\n  }\n  return _state._fetchCurrentState();\n}\nexport function addEventListener(listener) {\n  if (!_state) {\n    _state = createState();\n  }\n  _state.add(listener);\n  return function () {\n    _state && _state.remove(listener);\n  };\n}\nexport function useNetInfo(configuration) {\n  if (configuration) {\n    configure(configuration);\n  }\n  var _useState = useState({\n      type: Types.NetInfoStateType.unknown,\n      isConnected: null,\n      isInternetReachable: null,\n      details: null\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    netInfo = _useState2[0],\n    setNetInfo = _useState2[1];\n  useEffect(function () {\n    return addEventListener(setNetInfo);\n  }, []);\n  return netInfo;\n}\nexport function useNetInfoInstance() {\n  var isPaused = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  var configuration = arguments.length > 1 ? arguments[1] : undefined;\n  var _useState3 = useState(),\n    _useState4 = _slicedToArray(_useState3, 2),\n    networkInfoManager = _useState4[0],\n    setNetworkInfoManager = _useState4[1];\n  var _useState5 = useState({\n      type: Types.NetInfoStateType.unknown,\n      isConnected: null,\n      isInternetReachable: null,\n      details: null\n    }),\n    _useState6 = _slicedToArray(_useState5, 2),\n    netInfo = _useState6[0],\n    setNetInfo = _useState6[1];\n  useEffect(function () {\n    if (isPaused) {\n      return;\n    }\n    var config = _objectSpread(_objectSpread({}, DEFAULT_CONFIGURATION), configuration);\n    var state = new State(config);\n    setNetworkInfoManager(state);\n    state.add(setNetInfo);\n    return state.tearDown;\n  }, [isPaused, configuration]);\n  var refresh = useCallback(function () {\n    networkInfoManager && networkInfoManager._fetchCurrentState();\n  }, [networkInfoManager]);\n  return {\n    netInfo: netInfo,\n    refresh: refresh\n  };\n}\nexport * from \"./internal/types\";\nexport default {\n  configure: configure,\n  fetch: fetch,\n  refresh: refresh,\n  addEventListener: addEventListener,\n  useNetInfo: useNetInfo,\n  useNetInfoInstance: useNetInfoInstance\n};","map":{"version":3,"names":["useState","useEffect","useCallback","Platform","DEFAULT_CONFIGURATION","NativeInterface","State","Types","_configuration","_state","createState","configure","configuration","_objectSpread","tearDown","OS","fetch","requestedInterface","latest","refresh","_fetchCurrentState","addEventListener","listener","add","remove","useNetInfo","_useState","type","NetInfoStateType","unknown","isConnected","isInternetReachable","details","_useState2","_slicedToArray","netInfo","setNetInfo","useNetInfoInstance","isPaused","arguments","length","undefined","_useState3","_useState4","networkInfoManager","setNetworkInfoManager","_useState5","_useState6","config","state"],"sources":["/workspaces/Bucx-Mobile/node_modules/@react-native-community/netinfo/lib/module/index.ts"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport {useState, useEffect, useCallback} from 'react';\nimport {Platform} from 'react-native';\nimport DEFAULT_CONFIGURATION from './internal/defaultConfiguration';\nimport NativeInterface from './internal/nativeInterface';\nimport State from './internal/state';\nimport * as Types from './internal/types';\n\n// Stores the currently used configuration\nlet _configuration = DEFAULT_CONFIGURATION;\n\n// Stores the singleton reference to the state manager\nlet _state: State | null = null;\nconst createState = (): State => {\n  return new State(_configuration);\n};\n\n/**\n * Configures the library with the given configuration. Note that calling this will stop all\n * previously added listeners from being called again. It is best to call this right when your\n * application is started to avoid issues. The configuration sets up a global singleton instance.\n *\n * @param configuration The new configuration to set.\n */\nexport function configure(\n  configuration: Partial<Types.NetInfoConfiguration>,\n): void {\n  _configuration = {\n    ...DEFAULT_CONFIGURATION,\n    ...configuration,\n  };\n\n  if (_state) {\n    _state.tearDown();\n    _state = createState();\n  }\n\n  if (Platform.OS === 'ios') {\n    NativeInterface.configure(configuration);\n  }\n}\n\n/**\n * Returns a `Promise` that resolves to a `NetInfoState` object.\n * This function operates on the global singleton instance configured using `configure()`\n *\n * @param [requestedInterface] interface from which to obtain the information\n *\n * @returns A Promise which contains the current connection state.\n */\nexport function fetch(\n  requestedInterface?: string,\n): Promise<Types.NetInfoState> {\n  if (!_state) {\n    _state = createState();\n  }\n  return _state.latest(requestedInterface);\n}\n\n/**\n * Force-refreshes the internal state of the global singleton managed by this library.\n *\n * @returns A Promise which contains the updated connection state.\n */\nexport function refresh(): Promise<Types.NetInfoState> {\n  if (!_state) {\n    _state = createState();\n  }\n  return _state._fetchCurrentState();\n}\n\n/**\n * Subscribe to the global singleton's connection information. The callback is called with a parameter of type\n * [`NetInfoState`](README.md#netinfostate) whenever the connection state changes. Your listener\n * will be called with the latest information soon after you subscribe and then with any\n * subsequent changes afterwards. You should not assume that the listener is called in the same\n * way across devices or platforms.\n *\n * @param listener The listener which is called when the network state changes.\n *\n * @returns A function which can be called to unsubscribe.\n */\nexport function addEventListener(\n  listener: Types.NetInfoChangeHandler,\n): Types.NetInfoSubscription {\n  if (!_state) {\n    _state = createState();\n  }\n\n  _state.add(listener);\n  return (): void => {\n    _state && _state.remove(listener);\n  };\n}\n\n/**\n * A React Hook into this library's singleton which updates when the connection state changes.\n *\n * @param {Partial<Types.NetInfoConfiguration>} configuration - Configure the isolated network checker managed by this hook\n *\n * @returns The connection state.\n */\nexport function useNetInfo(\n  configuration?: Partial<Types.NetInfoConfiguration>,\n): Types.NetInfoState {\n  if (configuration) {\n    configure(configuration);\n  }\n\n  const [netInfo, setNetInfo] = useState<Types.NetInfoState>({\n    type: Types.NetInfoStateType.unknown,\n    isConnected: null,\n    isInternetReachable: null,\n    details: null,\n  });\n\n  useEffect((): (() => void) => {\n    return addEventListener(setNetInfo);\n  }, []);\n\n  return netInfo;\n}\n\n/**\n * A React Hook which manages an isolated instance of the network info manager.\n * This is not a hook into a singleton shared state. NetInfo.configure, NetInfo.addEventListener,\n * NetInfo.fetch, NetInfo.refresh are performed on a global singleton and have no affect on this hook.\n * @param {boolean} isPaused - Pause the internal network checks.\n * @param {Partial<Types.NetInfoConfiguration>} configuration - Configure the isolated network checker managed by this hook\n *\n * @returns the netInfo state and a refresh function\n */\nexport function useNetInfoInstance(\n  isPaused = false,\n  configuration?: Partial<Types.NetInfoConfiguration>,\n) {\n  const [networkInfoManager, setNetworkInfoManager] = useState<State>();\n  const [netInfo, setNetInfo] = useState<Types.NetInfoState>({\n    type: Types.NetInfoStateType.unknown,\n    isConnected: null,\n    isInternetReachable: null,\n    details: null,\n  });\n\n  useEffect(() => {\n    if (isPaused) {\n      return;\n    }\n    const config = {\n      ...DEFAULT_CONFIGURATION,\n      ...configuration,\n    };\n    const state = new State(config);\n    setNetworkInfoManager(state);\n    state.add(setNetInfo);\n    return state.tearDown;\n  }, [isPaused, configuration]);\n\n  const refresh = useCallback(() => {\n    networkInfoManager && networkInfoManager._fetchCurrentState();\n  }, [networkInfoManager]);\n\n  return {\n    netInfo,\n    refresh,\n  };\n}\n\nexport * from './internal/types';\n\nexport default {\n  configure,\n  fetch,\n  refresh,\n  addEventListener,\n  useNetInfo,\n  useNetInfoInstance,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}